/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 31 13:17:04 GMT 2021
 */

package function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import function.Calculator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calculator<Integer> calculator0 = new Calculator<Integer>();
      Double double0 = calculator0.answer;
      Calculator<Object> calculator1 = new Calculator<Object>();
      calculator1.times(double0);
      assertEquals(0.0, calculator1.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calculator<String> calculator0 = new Calculator<String>();
      boolean boolean0 = calculator0.isNull((Double) null, (Double) null);
      assertTrue(boolean0);
      assertEquals(0.0, calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Calculator<String> calculator0 = new Calculator<String>();
      Calculator<Integer> calculator1 = new Calculator<Integer>();
      calculator0.add(calculator1.answer);
      assertEquals(0.0, calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      Calculator<Integer> calculator1 = new Calculator<Integer>();
      Double double0 = calculator1.answer;
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = calculator0.isNull(double0, (Double) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calculator<Integer> calculator0 = new Calculator<Integer>();
      Double double0 = calculator0.answer;
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = calculator0.isNull(double0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calculator<String> calculator0 = new Calculator<String>();
      Calculator<Integer> calculator1 = new Calculator<Integer>();
      calculator0.divided(calculator1.answer);
      Double double0 = calculator0.getAnswer();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      Double double0 = new Double((-2004.586764135188));
      calculator0.plus(double0);
      calculator0.divided(double0);
      calculator0.getAnswer();
      assertEquals(1.0, calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      Double double0 = new Double((-2004.586764135188));
      calculator0.plus(double0);
      calculator0.getAnswer();
      assertEquals((-2004.586764135188), calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(1.0);
      Calculator<Object> calculator0 = new Calculator<Object>();
      calculator0.minus(double0);
      calculator0.getAnswer();
      assertEquals((-1.0), calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      Double double0 = new Double(0.0);
      calculator0.divided(double0);
      // Undeclared exception!
      try { 
        calculator0.times(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("function.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calculator<String> calculator0 = new Calculator<String>();
      calculator0.t = null;
      // Undeclared exception!
      try { 
        calculator0.show();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("function.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calculator<Integer> calculator0 = new Calculator<Integer>();
      // Undeclared exception!
      try { 
        calculator0.plus((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("function.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      // Undeclared exception!
      try { 
        calculator0.divided((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("function.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      // Undeclared exception!
      try { 
        calculator0.add((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("function.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      calculator0.show();
      assertEquals(0.0, calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Calculator<String> calculator0 = new Calculator<String>();
      Double double0 = calculator0.getAnswer();
      calculator0.minus(double0);
      assertEquals(0.0, calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      calculator0.minus((Double) null);
      assertEquals(0.0, calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Calculator<String> calculator0 = new Calculator<String>();
      Double double0 = calculator0.getAnswer();
      Calculator<Integer> calculator1 = new Calculator<Integer>();
      assertEquals(0.0, calculator1.getAnswer(), 0.01);
      
      calculator1.divided(double0);
      calculator1.plus(double0);
      assertEquals(0.0, calculator0.getAnswer(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Calculator<Object> calculator0 = new Calculator<Object>();
      Double double0 = new Double(2318.7166110943595);
      calculator0.times(double0);
      assertEquals(0.0, calculator0.getAnswer(), 0.01);
  }
}
